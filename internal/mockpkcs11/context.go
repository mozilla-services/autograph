// Code generated by MockGen. DO NOT EDIT.
// Source: crypto11/crypto11.go

// Package mockpkcs11 is a generated GoMock package.
package mockpkcs11

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pkcs11 "github.com/miekg/pkcs11"
)

// MockPKCS11Context is a mock of PKCS11Context interface.
type MockPKCS11Context struct {
	ctrl     *gomock.Controller
	recorder *MockPKCS11ContextMockRecorder
}

// MockPKCS11ContextMockRecorder is the mock recorder for MockPKCS11Context.
type MockPKCS11ContextMockRecorder struct {
	mock *MockPKCS11Context
}

// NewMockPKCS11Context creates a new mock instance.
func NewMockPKCS11Context(ctrl *gomock.Controller) *MockPKCS11Context {
	mock := &MockPKCS11Context{ctrl: ctrl}
	mock.recorder = &MockPKCS11ContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPKCS11Context) EXPECT() *MockPKCS11ContextMockRecorder {
	return m.recorder
}

// CloseAllSessions mocks base method.
func (m *MockPKCS11Context) CloseAllSessions(slotID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAllSessions", slotID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAllSessions indicates an expected call of CloseAllSessions.
func (mr *MockPKCS11ContextMockRecorder) CloseAllSessions(slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllSessions", reflect.TypeOf((*MockPKCS11Context)(nil).CloseAllSessions), slotID)
}

// CloseSession mocks base method.
func (m *MockPKCS11Context) CloseSession(sh pkcs11.SessionHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSession", sh)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSession indicates an expected call of CloseSession.
func (mr *MockPKCS11ContextMockRecorder) CloseSession(sh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSession", reflect.TypeOf((*MockPKCS11Context)(nil).CloseSession), sh)
}

// Decrypt mocks base method.
func (m *MockPKCS11Context) Decrypt(sh pkcs11.SessionHandle, cipher []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", sh, cipher)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockPKCS11ContextMockRecorder) Decrypt(sh, cipher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockPKCS11Context)(nil).Decrypt), sh, cipher)
}

// DecryptFinal mocks base method.
func (m *MockPKCS11Context) DecryptFinal(sh pkcs11.SessionHandle) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptFinal", sh)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptFinal indicates an expected call of DecryptFinal.
func (mr *MockPKCS11ContextMockRecorder) DecryptFinal(sh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptFinal", reflect.TypeOf((*MockPKCS11Context)(nil).DecryptFinal), sh)
}

// DecryptInit mocks base method.
func (m_2 *MockPKCS11Context) DecryptInit(sh pkcs11.SessionHandle, m []*pkcs11.Mechanism, o pkcs11.ObjectHandle) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "DecryptInit", sh, m, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecryptInit indicates an expected call of DecryptInit.
func (mr *MockPKCS11ContextMockRecorder) DecryptInit(sh, m, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptInit", reflect.TypeOf((*MockPKCS11Context)(nil).DecryptInit), sh, m, o)
}

// DecryptUpdate mocks base method.
func (m *MockPKCS11Context) DecryptUpdate(sh pkcs11.SessionHandle, cipher []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptUpdate", sh, cipher)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptUpdate indicates an expected call of DecryptUpdate.
func (mr *MockPKCS11ContextMockRecorder) DecryptUpdate(sh, cipher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptUpdate", reflect.TypeOf((*MockPKCS11Context)(nil).DecryptUpdate), sh, cipher)
}

// Destroy mocks base method.
func (m *MockPKCS11Context) Destroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy")
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPKCS11ContextMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPKCS11Context)(nil).Destroy))
}

// Encrypt mocks base method.
func (m *MockPKCS11Context) Encrypt(sh pkcs11.SessionHandle, message []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", sh, message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockPKCS11ContextMockRecorder) Encrypt(sh, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockPKCS11Context)(nil).Encrypt), sh, message)
}

// EncryptFinal mocks base method.
func (m *MockPKCS11Context) EncryptFinal(sh pkcs11.SessionHandle) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptFinal", sh)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptFinal indicates an expected call of EncryptFinal.
func (mr *MockPKCS11ContextMockRecorder) EncryptFinal(sh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptFinal", reflect.TypeOf((*MockPKCS11Context)(nil).EncryptFinal), sh)
}

// EncryptInit mocks base method.
func (m_2 *MockPKCS11Context) EncryptInit(sh pkcs11.SessionHandle, m []*pkcs11.Mechanism, o pkcs11.ObjectHandle) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "EncryptInit", sh, m, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// EncryptInit indicates an expected call of EncryptInit.
func (mr *MockPKCS11ContextMockRecorder) EncryptInit(sh, m, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptInit", reflect.TypeOf((*MockPKCS11Context)(nil).EncryptInit), sh, m, o)
}

// EncryptUpdate mocks base method.
func (m *MockPKCS11Context) EncryptUpdate(sh pkcs11.SessionHandle, plain []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptUpdate", sh, plain)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptUpdate indicates an expected call of EncryptUpdate.
func (mr *MockPKCS11ContextMockRecorder) EncryptUpdate(sh, plain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptUpdate", reflect.TypeOf((*MockPKCS11Context)(nil).EncryptUpdate), sh, plain)
}

// Finalize mocks base method.
func (m *MockPKCS11Context) Finalize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Finalize indicates an expected call of Finalize.
func (mr *MockPKCS11ContextMockRecorder) Finalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockPKCS11Context)(nil).Finalize))
}

// FindObjects mocks base method.
func (m *MockPKCS11Context) FindObjects(sh pkcs11.SessionHandle, max int) ([]pkcs11.ObjectHandle, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindObjects", sh, max)
	ret0, _ := ret[0].([]pkcs11.ObjectHandle)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindObjects indicates an expected call of FindObjects.
func (mr *MockPKCS11ContextMockRecorder) FindObjects(sh, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindObjects", reflect.TypeOf((*MockPKCS11Context)(nil).FindObjects), sh, max)
}

// FindObjectsFinal mocks base method.
func (m *MockPKCS11Context) FindObjectsFinal(sh pkcs11.SessionHandle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindObjectsFinal", sh)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindObjectsFinal indicates an expected call of FindObjectsFinal.
func (mr *MockPKCS11ContextMockRecorder) FindObjectsFinal(sh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindObjectsFinal", reflect.TypeOf((*MockPKCS11Context)(nil).FindObjectsFinal), sh)
}

// FindObjectsInit mocks base method.
func (m *MockPKCS11Context) FindObjectsInit(sh pkcs11.SessionHandle, temp []*pkcs11.Attribute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindObjectsInit", sh, temp)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindObjectsInit indicates an expected call of FindObjectsInit.
func (mr *MockPKCS11ContextMockRecorder) FindObjectsInit(sh, temp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindObjectsInit", reflect.TypeOf((*MockPKCS11Context)(nil).FindObjectsInit), sh, temp)
}

// GenerateKey mocks base method.
func (m_2 *MockPKCS11Context) GenerateKey(sh pkcs11.SessionHandle, m []*pkcs11.Mechanism, temp []*pkcs11.Attribute) (pkcs11.ObjectHandle, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GenerateKey", sh, m, temp)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKey indicates an expected call of GenerateKey.
func (mr *MockPKCS11ContextMockRecorder) GenerateKey(sh, m, temp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockPKCS11Context)(nil).GenerateKey), sh, m, temp)
}

// GenerateKeyPair mocks base method.
func (m_2 *MockPKCS11Context) GenerateKeyPair(sh pkcs11.SessionHandle, m []*pkcs11.Mechanism, public, private []*pkcs11.Attribute) (pkcs11.ObjectHandle, pkcs11.ObjectHandle, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "GenerateKeyPair", sh, m, public, private)
	ret0, _ := ret[0].(pkcs11.ObjectHandle)
	ret1, _ := ret[1].(pkcs11.ObjectHandle)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateKeyPair indicates an expected call of GenerateKeyPair.
func (mr *MockPKCS11ContextMockRecorder) GenerateKeyPair(sh, m, public, private interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKeyPair", reflect.TypeOf((*MockPKCS11Context)(nil).GenerateKeyPair), sh, m, public, private)
}

// GenerateRandom mocks base method.
func (m *MockPKCS11Context) GenerateRandom(sh pkcs11.SessionHandle, length int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandom", sh, length)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandom indicates an expected call of GenerateRandom.
func (mr *MockPKCS11ContextMockRecorder) GenerateRandom(sh, length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandom", reflect.TypeOf((*MockPKCS11Context)(nil).GenerateRandom), sh, length)
}

// GetAttributeValue mocks base method.
func (m *MockPKCS11Context) GetAttributeValue(sh pkcs11.SessionHandle, o pkcs11.ObjectHandle, a []*pkcs11.Attribute) ([]*pkcs11.Attribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeValue", sh, o, a)
	ret0, _ := ret[0].([]*pkcs11.Attribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeValue indicates an expected call of GetAttributeValue.
func (mr *MockPKCS11ContextMockRecorder) GetAttributeValue(sh, o, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeValue", reflect.TypeOf((*MockPKCS11Context)(nil).GetAttributeValue), sh, o, a)
}

// GetSlotList mocks base method.
func (m *MockPKCS11Context) GetSlotList(tokenPresent bool) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotList", tokenPresent)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotList indicates an expected call of GetSlotList.
func (mr *MockPKCS11ContextMockRecorder) GetSlotList(tokenPresent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotList", reflect.TypeOf((*MockPKCS11Context)(nil).GetSlotList), tokenPresent)
}

// GetTokenInfo mocks base method.
func (m *MockPKCS11Context) GetTokenInfo(slotID uint) (pkcs11.TokenInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenInfo", slotID)
	ret0, _ := ret[0].(pkcs11.TokenInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenInfo indicates an expected call of GetTokenInfo.
func (mr *MockPKCS11ContextMockRecorder) GetTokenInfo(slotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenInfo", reflect.TypeOf((*MockPKCS11Context)(nil).GetTokenInfo), slotID)
}

// Initialize mocks base method.
func (m *MockPKCS11Context) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockPKCS11ContextMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockPKCS11Context)(nil).Initialize))
}

// Login mocks base method.
func (m *MockPKCS11Context) Login(sh pkcs11.SessionHandle, userType uint, pin string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", sh, userType, pin)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockPKCS11ContextMockRecorder) Login(sh, userType, pin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockPKCS11Context)(nil).Login), sh, userType, pin)
}

// OpenSession mocks base method.
func (m *MockPKCS11Context) OpenSession(slotID, flags uint) (pkcs11.SessionHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSession", slotID, flags)
	ret0, _ := ret[0].(pkcs11.SessionHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSession indicates an expected call of OpenSession.
func (mr *MockPKCS11ContextMockRecorder) OpenSession(slotID, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSession", reflect.TypeOf((*MockPKCS11Context)(nil).OpenSession), slotID, flags)
}

// Sign mocks base method.
func (m *MockPKCS11Context) Sign(sh pkcs11.SessionHandle, message []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", sh, message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockPKCS11ContextMockRecorder) Sign(sh, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPKCS11Context)(nil).Sign), sh, message)
}

// SignFinal mocks base method.
func (m *MockPKCS11Context) SignFinal(sh pkcs11.SessionHandle) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignFinal", sh)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignFinal indicates an expected call of SignFinal.
func (mr *MockPKCS11ContextMockRecorder) SignFinal(sh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignFinal", reflect.TypeOf((*MockPKCS11Context)(nil).SignFinal), sh)
}

// SignInit mocks base method.
func (m_2 *MockPKCS11Context) SignInit(sh pkcs11.SessionHandle, m []*pkcs11.Mechanism, o pkcs11.ObjectHandle) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SignInit", sh, m, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignInit indicates an expected call of SignInit.
func (mr *MockPKCS11ContextMockRecorder) SignInit(sh, m, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInit", reflect.TypeOf((*MockPKCS11Context)(nil).SignInit), sh, m, o)
}

// SignUpdate mocks base method.
func (m *MockPKCS11Context) SignUpdate(sh pkcs11.SessionHandle, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpdate", sh, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUpdate indicates an expected call of SignUpdate.
func (mr *MockPKCS11ContextMockRecorder) SignUpdate(sh, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpdate", reflect.TypeOf((*MockPKCS11Context)(nil).SignUpdate), sh, message)
}
