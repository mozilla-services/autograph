# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2
jobs:
  lint-vet-fmt:
    docker:
      - image: golang:1.11
    working_directory: /usr/local/go/src/go.mozilla.org/autograph
    steps:
      - checkout
      - run:
          name: run golint
          command: make install-golint lint || true
      - run:
          name: run gofmt
          command: |
              make -s fmt-diff | tee fmt.diff
              test -z "$(cat fmt.diff)"
      - run:
          name: install packages for crypto11 headers for go vet
          command: |
              apt-get update
              apt-get install -y libltdl-dev
      - run:
          name: run got vet
          command: make vet

  build:
    # based on the official golang image with more docker stuff
    docker:
      - image: circleci/golang:1.11.4
    working_directory: /go/src/go.mozilla.org/autograph
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: create version.json and other autogenerated files
          command: make generate
      - run:
          name: build docker images
          command: make build-app-container build-monitor-container build-softhsm-container
      # save the built docker container to CircleCI's cache since
      # CircleCI Workflows do not have the same remote docker
      # instance.
      #
      # Use /go/src/app since we don't have permissions to make
      # directories in other locations
      - run:
          name: docker save built images
          no_output_timeout: 30m
          command: |
              mkdir -p /go/src/app/cache
              docker save "app:build" | gzip -c > /go/src/app/cache/docker-app-build.tgz
              docker save "monitor:build" | gzip -c > /go/src/app/cache/docker-monitor-build.tgz
              docker save "softhsm:build" | gzip -c > /go/src/app/cache/docker-softhsm-build.tgz
      - save_cache:
          key: v2-{{ .Branch }}-{{ epoch }}
          paths:
            - /go/src/app/cache/docker-app-build.tgz
            - /go/src/app/cache/docker-monitor-build.tgz
            - /go/src/app/cache/docker-softhsm-build.tgz

  unit-test:
    docker:
      - image: circleci/golang:1.11.4
    working_directory: /go/src/go.mozilla.org/autograph
    environment:
        GOPATH: "/go"
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v2-{{ .Branch }}
      - run:
          name: Restore Docker image cache
          command: gunzip -c /go/src/app/cache/docker-app-build.tgz | docker load
      - run:
          name: Run unit tests in built app
          command: |
             docker run --name autograph-unit-test -u 0 -p 8000:8000 --workdir /go/src/go.mozilla.org/autograph app:build make test
      - run:
          name: install goveralls and cover
          command: |
            make install-goveralls install-cover
      - run:
          name: report coverage
          command: |
             docker cp autograph-unit-test:/go/src/go.mozilla.org/autograph/coverage.out coverage.out
             ls -lh coverage.out
             pwd
             cd $GOPATH/src/go.mozilla.org/autograph
             $GOPATH/bin/goveralls -coverprofile=coverage.out -service circle-ci -repotoken $COVERALLS_TOKEN

  integration-test:
    docker:
      - image: docker:18.02.0-ce
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v2-{{ .Branch }}
      - run:
          name: Restore Docker image cache
          command: |
              gunzip -c /go/src/app/cache/docker-app-build.tgz | docker load
              gunzip -c /go/src/app/cache/docker-monitor-build.tgz | docker load
              gunzip -c /go/src/app/cache/docker-softhsm-build.tgz | docker load
      - run:
          name: Run Autograph with default configuration
          command: |
             docker run -d --name autograph-app app:build
          background: true
      - run:
          name: Run autograph with hsm configuration
          command: |
              docker run -d --name autograph-app-hsm softhsm:build
          background: true
      - run:
          name: wait for apps to run
          command: |
             while test "true" != "$(docker inspect -f {{.State.Running}} autograph-app)"; do
               echo -n "."
               sleep 1 # wait before checking again
             done
             while test "true" != "$(docker inspect -f {{.State.Running}} autograph-app-hsm)"; do
               echo -n "."
               sleep 1 # wait before checking again
             done
             sleep 5  # wait for servers to listen
      - run:
          name: check monitor endpoint works
          command: |
             docker run --rm --name autograph-monitor-test --network container:autograph-app monitor:build
             docker run --rm --name autograph-monitor-test-hsm --rm --network container:autograph-app-hsm monitor:build
      - run:
          name: check XPI signing works
          command: |
              docker run --rm --name autograph-sign-xpi-test --network container:autograph-app --user 0 --workdir /go/src/go.mozilla.org/autograph/tools/autograph-client app:build /bin/sh -c "wget https://addons.mozilla.org/firefox/downloads/file/935711/pomodoro_clock-1.1.1-an+fx-windows.xpi && SIGNER_ID=webextensions-rsa TRUST_ROOTS=dev-webext-rsa-root.pem ./build_test_xpis.sh pomodoro_clock-1.1.1-an+fx-windows.xpi && SIGNER_ID=extensions-ecdsa TRUST_ROOTS=dev-ext-ecdsa-root.pem ./build_test_xpis.sh pomodoro_clock-1.1.1-an+fx-windows.xpi"
              docker run --rm --name autograph-sign-xpi-test-hsm --network container:autograph-app-hsm --user 0 --workdir /go/src/go.mozilla.org/autograph/tools/autograph-client softhsm:build /bin/sh -c 'wget https://addons.mozilla.org/firefox/downloads/file/935711/pomodoro_clock-1.1.1-an+fx-windows.xpi && SIGNER_ID=hsm-webextensions-rsa TRUST_ROOTS=dev-webext-rsa-root.pem ./build_test_xpis.sh pomodoro_clock-1.1.1-an+fx-windows.xpi && SIGNER_ID=hsm-extensions-ecdsa TRUST_ROOTS=dev-ext-ecdsa-root.pem ./build_test_xpis.sh pomodoro_clock-1.1.1-an+fx-windows.xpi'
      - run:
          name: check APK signing works
          command: |
              # TODO: HSM support for APK signing keys and test here
              docker run --name autograph-sign-apk-test --network container:autograph-app --user 0 --workdir /go/src/go.mozilla.org/autograph/tools/autograph-client app:build /bin/sh -c "./build_test_apks.sh"
              docker cp autograph-sign-apk-test:/go/src/go.mozilla.org/autograph/tools/autograph-client/resigned-apks.tgz /go/src/app/cache/
              docker stop autograph-sign-apk-test || true
              docker rm -f autograph-sign-apk-test || true
              chmod -R 777 /go/src/app/cache/
              ls -lh /go/src/app/cache/
      - save_cache:
          key: v2-apk-{{ .Branch }}-{{ .Revision }}
          paths:
            - /go/src/app/cache/resigned-apks.tgz

  verify-apk:
    working_directory: ~/
    docker:
      - image: circleci/android:api-25-alpha
        user: root
    steps:
      - restore_cache:
          key: v2-apk-{{ .Branch }}-{{ .Revision }}
      - run:
          name: install android SDK
          command: |
              sudo apt update
              sudo apt install -y android-sdk-build-tools
      - run:
          name: Verify APKs
          command: |
              ls -lh /go/src/app/cache/
              cd /tmp/
              tar xvzf /go/src/app/cache/resigned-apks.tgz
              for apk in $(ls *.resigned.apk); do
                  /opt/android/sdk/build-tools/27.0.3/apksigner verify --verbose $apk
              done

  deploy:
    docker:
      - image: docker:18.02.0-ce
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v2-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: gunzip -c /go/src/app/cache/docker-app-build.tgz | docker load

      - run:
          name: Deploy to Dockerhub
          command: |
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag app:build ${DOCKERHUB_REPO}:latest
              docker push ${DOCKERHUB_REPO}:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
            # deploy a release tag...
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag app:build "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker images
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  check-code-quality:
    jobs:
      - lint-vet-fmt:
          filters:
            tags:
              only: /.*/

  test-sign-build-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - unit-test:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - integration-test:
          requires:
            - build
          filters:
            tags:
              only: /.*/

      - verify-apk:
          requires:
            - build
            - integration-test
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - build
            - unit-test
            - integration-test
            - verify-apk
          filters:
            tags:
              # only upload the docker container on semver tags
              only: /[0-9]\.[0-9]\.[0-9]/
            branches:
              only: master
